openapi: 3.0.3
info:
  title: API de Registro de Usuarios
  description: API RESTful para el registro de usuarios con validaciones de email y contraseña
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Servidor local
paths:
  /api/usuarios/registro:
    post:
      summary: Registro de usuario
      description: Registra un nuevo usuario en el sistema con validaciones de email y contraseña
      operationId: registrarUsuario
      tags:
        - Usuarios
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
      responses:
        '201':
          description: Usuario registrado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistrationResponse'
        '400':
          description: Error de validación o datos incorrectos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '409':
          description: El correo ya está registrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /api/usuarios/email/{email}:
    get:
      summary: Obtener usuario por email
      description: Obtiene un usuario específico por su dirección de email
      operationId: obtenerUsuarioPorEmail
      tags:
        - Usuarios
      parameters:
        - name: email
          in: path
          required: true
          description: Email del usuario a buscar
          schema:
            type: string
            format: email
      responses:
        '200':
          description: Usuario encontrado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistrationResponse'
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /api/usuarios/{id}/login:
    patch:
      summary: Actualizar último login
      description: Actualiza la fecha del último login del usuario
      operationId: actualizarUltimoLogin
      tags:
        - Usuarios
      parameters:
        - name: id
          in: path
          required: true
          description: ID del usuario
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Último login actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistrationResponse'
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
components:
  schemas:
    UserRegistrationRequest:
      type: object
      required:
        - name
        - email
        - password
        - phones
      properties:
        name:
          type: string
          minLength: 1
          description: Nombre completo del usuario
          example: Juan Rodriguez
        email:
          type: string
          format: email
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
          description: Correo electrónico del usuario (debe seguir formato aaaaaaa@dominio.cl)
          example: juan@rodriguez.org
        password:
          type: string
          minLength: 8
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$'
          description: Contraseña del usuario (debe seguir expresión regular configurable)
          example: hunter2
        phones:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/PhoneDTO'
          description: Lista de teléfonos del usuario
    PhoneDTO:
      type: object
      required:
        - number
        - citycode
        - contrycode
      properties:
        number:
          type: string
          minLength: 1
          description: Número de teléfono
          example: '1234567'
        citycode:
          type: string
          minLength: 1
          description: Código de ciudad
          example: '1'
        contrycode:
          type: string
          minLength: 1
          description: Código de país
          example: '57'
    UserRegistrationResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: ID único del usuario (UUID)
          example: '123e4567-e89b-12d3-a456-426614174000'
        created:
          type: string
          format: date-time
          description: Fecha de creación del usuario
          example: '2024-05-01T12:00Z'
        modified:
          type: string
          format: date-time
          description: Fecha de la última actualización del usuario
          example: '2024-05-01T12:00Z'
        last_login:
          type: string
          format: date-time
          description: Fecha del último ingreso (coincide con created para usuarios nuevos)
          example: '2024-05-01T12:00Z'
        token:
          type: string
          description: Token JWT de acceso a la API
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikp1YW4gUm9kcmlndWV6IiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
        isactive:
          type: boolean
          description: Indica si el usuario está habilitado en el sistema
          example: true
        name:
          type: string
          description: Nombre completo del usuario
          example: Juan Rodriguez
        email:
          type: string
          format: email
          description: Correo electrónico del usuario
          example: juan@rodriguez.org
        phones:
          type: array
          items:
            $ref: '#/components/schemas/PhoneDTO'
          description: Lista de teléfonos del usuario
    ErrorDTO:
      type: object
      properties:
        mensaje:
          type: string
          description: Mensaje de error
          example: 'Error de validación'